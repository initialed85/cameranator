version: '3.6'

networks:
  cctv-internal:
    internal: true
  cctv-external:

volumes:
  cctv-data:
  front-end:

services:
  postgres:
    image: postgres:12
    networks:
      - cctv-internal
    volumes:
      - cctv-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    restart: always

  hasura:
    image: hasura/graphql-engine:v1.3.3
    networks:
      - cctv-internal
      - cctv-external
    ports:
      - 8082:8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    restart: always

  quotanizer:
    networks:
      - cctv-internal
    build:
      context: ./quotanizer
    volumes:
      - ${CCTV_EVENTS_PATH}:/mnt/events
      - ${CCTV_SEGMENTS_PATH}:/mnt/segments
    command: "-path /mnt/events -quota ${CCTV_EVENTS_QUOTA} -path /mnt/segments -quota ${CCTV_SEGMENTS_QUOTA} -suffix .mp4 -suffix .jpg -period 60"
    restart: always

  motion-processor:
    build:
      context: ./
      dockerfile: docker/motion-processor/Dockerfile
    networks:
      - cctv-internal
      - cctv-external
    # ports:
    #   - 6291:6291/udp
    volumes:
      - ${CCTV_EVENTS_PATH}:/srv/target_dir/events
    environment:
      - DISABLE_NVIDIA=${DISABLE_NVIDIA:-0}
    command: "-url http://hasura:8080/v1/graphql"
    restart: always

  motion:
    build:
      context: ./
      dockerfile: docker/motion/Dockerfile
    networks:
      - cctv-internal
      - cctv-external
    volumes:
      - ${CCTV_MOTION_CONFIGS}:/etc/motion
      - ${CCTV_EVENTS_PATH}:/srv/target_dir/events
    ports:
      - 8080:8080
      - 8081:8081
    environment:
      UDP_HOST: motion-processor
    restart: always

  segment-processor:
    build:
      context: ./
      dockerfile: docker/segment-processor/Dockerfile
    networks:
      - cctv-internal
      - cctv-external
    # ports:
    #   - 6291:6291/udp
    volumes:
      - ${CCTV_SEGMENTS_PATH}:/srv/target_dir/segments
    environment:
      - DISABLE_NVIDIA=${DISABLE_NVIDIA:-0}
    command: "-url http://hasura:8080/v1/graphql"
    restart: always

  segment-generator:
    build:
      context: ./
      dockerfile: docker/segment-generator/Dockerfile
    networks:
      - cctv-internal
      - cctv-external
    volumes:
      - ${CCTV_SEGMENTS_PATH}:/srv/target_dir/segments
    environment:
      - DISABLE_NVIDIA=${DISABLE_NVIDIA:-0}
    # TODO: parse motion config for this command line
    command: >
      -host segment-processor -port 6291 -destinationPath /srv/target_dir/segments -duration ${CCTV_SEGMENT_DURATION}
      -netCamURL rtsp://192.168.137.31:554/Streaming/Channels/101 -cameraName Driveway
      -netCamURL rtsp://192.168.137.32:554/Streaming/Channels/101 -cameraName FrontDoor
      -netCamURL rtsp://192.168.137.33:554/Streaming/Channels/101 -cameraName SideGate
    restart: always

  event-pruner:
    build:
      context: ./
      dockerfile: docker/event-pruner/Dockerfile
    networks:
      - cctv-internal
    volumes:
      - ${CCTV_EVENTS_PATH}:/srv/target_dir/events
      - ${CCTV_SEGMENTS_PATH}:/srv/target_dir/segments
    command: "-url http://hasura:8080/v1/graphql"
    restart: always

  # page-renderer:
  #   build:
  #     context: ./
  #     dockerfile: docker/page-renderer/Dockerfile
  #   networks:
  #     - cctv-internal
  #     - cctv-external
  #   volumes:
  #     - ${CCTV_EVENTS_PATH}:/srv/target_dir/events
  #     - ${CCTV_SEGMENTS_PATH}:/srv/target_dir/segments
  #   command: "-url http://hasura:8080/v1/graphql -eventsPath /srv/target_dir/events -segmentsPath /srv/target_dir/segments"
  #   restart: always

  front-end:
    build:
      context: ./
      dockerfile: docker/front-end/Dockerfile
    networks:
      - cctv-internal
      - cctv-external
    ports:
      - 3001:3000
    volumes:
      - front-end:/srv/build
    restart: always

  nginx:
    image: nginx:1.18
    networks:
      - cctv-internal
      - cctv-external
    ports:
      - ${CCTV_EXPOSE_PORT:-80}:80
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    volumes:
      - ./docker/nginx/empty_folder:/docker-entrypoint.d:ro
      - front-end:/srv/root:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ${CCTV_EVENTS_PATH}:/srv/target_dir/events
      - ${CCTV_SEGMENTS_PATH}:/srv/target_dir/segments
    restart: always
