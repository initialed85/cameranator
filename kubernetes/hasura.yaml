---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: cameranator
  name: hasura-config-map
data:
  HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: cameranator
  name: hasura-deployment
  labels:
    app: hasura
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hasura
  template:
    metadata:
      labels:
        app: hasura
    spec:
      containers:
        - name: hasura
          image: hasura/graphql-engine:v2.1.0
          env:
            - name: HASURA_GRAPHQL_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: hasura-config-map
                  key: HASURA_GRAPHQL_DATABASE_URL
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            - name: HASURA_GRAPHQL_DEV_MODE
              value: "true"
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup, http-log, webhook-log, websocket-log, query-log
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: hasura
  namespace: cameranator
spec:
  selector:
    app: hasura
  ports:
    - name: hasura
      port: 8080
      targetPort: 8080
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  namespace: cameranator
  name: hasura-middleware-stripprefix
spec:
  stripPrefix:
    prefixes:
      - /api
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  namespace: cameranator
  name: hasura-ingressroute
spec:
  routes:
    - match: HostRegexp(`{subdomain:cameranator}.{any:.*}`) && PathPrefix(`/api`)
      kind: Rule
      middlewares:
        - name: hasura-middleware-stripprefix
      services:
        - name: hasura
          port: 8080
